name: Update Packwiz Version

on:
  workflow_dispatch:

jobs:
  update:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Fetch latest packwiz commit
        id: fetch_commit
        run: |
          # Get the latest commit SHA from packwiz repository
          COMMIT_SHA=$(git ls-remote https://github.com/packwiz/packwiz.git HEAD | awk '{print $1}')
          echo "commit_sha=$COMMIT_SHA" >> $GITHUB_OUTPUT
          echo "short_sha=${COMMIT_SHA:0:7}" >> $GITHUB_OUTPUT

          # Fetch commit date
          git clone --depth 1 https://github.com/packwiz/packwiz.git /tmp/packwiz
          cd /tmp/packwiz
          git fetch origin $COMMIT_SHA
          git checkout $COMMIT_SHA
          COMMIT_DATE=$(git log -1 --format="%ci" | cut -d' ' -f1 | tr '-' '.')
          echo "commit_date=$COMMIT_DATE" >> $GITHUB_OUTPUT
          echo "Latest commit: $COMMIT_SHA"
          echo "Commit date: $COMMIT_DATE"

      - name: Check if update is needed
        id: check_update
        run: |
          # Get current version from main branch
          git fetch origin main
          CURRENT_VERSION=$(git show origin/main:Formula/packwiz.rb | grep -E '^\s*version' | sed 's/.*"\(.*\)".*/\1/')
          CURRENT_SHA=$(git show origin/main:Formula/packwiz.rb | grep -E '^\s*url' | sed 's/.*archive\/\(.*\)\.tar\.gz.*/\1/')

          NEW_VERSION="${{ steps.fetch_commit.outputs.commit_date }}"
          NEW_SHA="${{ steps.fetch_commit.outputs.commit_sha }}"

          echo "Current version: $CURRENT_VERSION (commit ${CURRENT_SHA:0:7})"
          echo "New version: $NEW_VERSION (commit ${NEW_SHA:0:7})"

          if [ "$CURRENT_SHA" = "$NEW_SHA" ]; then
            echo "needs_update=false" >> $GITHUB_OUTPUT
            echo "No update needed - already at latest version"
          else
            echo "needs_update=true" >> $GITHUB_OUTPUT
            echo "Update needed"
          fi

      - name: Download and calculate SHA256
        id: calculate_sha
        if: steps.check_update.outputs.needs_update == 'true'
        run: |
          COMMIT_SHA="${{ steps.fetch_commit.outputs.commit_sha }}"
          URL="https://github.com/packwiz/packwiz/archive/${COMMIT_SHA}.tar.gz"

          # Download the tarball
          curl -L -o /tmp/packwiz.tar.gz "$URL"

          # Calculate SHA256
          SHA256=$(sha256sum /tmp/packwiz.tar.gz | awk '{print $1}')
          echo "sha256=$SHA256" >> $GITHUB_OUTPUT
          echo "SHA256: $SHA256"

      - name: Update formula
        if: steps.check_update.outputs.needs_update == 'true'
        run: |
          COMMIT_SHA="${{ steps.fetch_commit.outputs.commit_sha }}"
          COMMIT_DATE="${{ steps.fetch_commit.outputs.commit_date }}"
          SHA256="${{ steps.calculate_sha.outputs.sha256 }}"

          # Update the formula file
          sed -i "s|url \".*\"|url \"https://github.com/packwiz/packwiz/archive/${COMMIT_SHA}.tar.gz\"|" Formula/packwiz.rb
          sed -i "s|version \".*\"|version \"${COMMIT_DATE}\"|" Formula/packwiz.rb
          sed -i "s|sha256 \".*\"|sha256 \"${SHA256}\"|" Formula/packwiz.rb

          echo "Updated formula to version ${COMMIT_DATE} (commit ${COMMIT_SHA:0:7})"
          cat Formula/packwiz.rb

      - name: Get existing PR info
        if: steps.check_update.outputs.needs_update == 'true'
        id: get_pr
        run: |
          # Check if there's an existing PR from this workflow
          gh pr list --state open --json number,headRefName,title,body > /tmp/pr_list.json
          EXISTING_PR=$(cat /tmp/pr_list.json | jq -r '.[] | select(.headRefName == "update-packwiz") | .number')

          if [ -n "$EXISTING_PR" ]; then
            echo "existing_pr=$EXISTING_PR" >> $GITHUB_OUTPUT
            # Get the current body to preserve update history
            EXISTING_BODY=$(cat /tmp/pr_list.json | jq -r '.[] | select(.headRefName == "update-packwiz") | .body')

            # Use a clear marker to extract history
            # Look for content between <!-- UPDATE_HISTORY_START --> and <!-- UPDATE_HISTORY_END -->
            HISTORY=$(echo "$EXISTING_BODY" | awk '/<!-- UPDATE_HISTORY_START -->/,/<!-- UPDATE_HISTORY_END -->/' | grep -v 'UPDATE_HISTORY')

            # If no history section exists yet, create one from current "Latest Changes"
            if [ -z "$HISTORY" ]; then
              CURRENT_VERSION=$(echo "$EXISTING_BODY" | grep -A 3 '\*\*Latest Changes:\*\*' | tail -n 3)
              if [ -n "$CURRENT_VERSION" ]; then
                HISTORY="### Previous Updates"$'\n\n'"#### Update from previous run"$'\n'"$CURRENT_VERSION"
              fi
            fi

            echo "update_history<<EOF" >> $GITHUB_OUTPUT
            echo "$HISTORY" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
            echo "Found existing PR #$EXISTING_PR with history"
          else
            echo "existing_pr=" >> $GITHUB_OUTPUT
            echo "update_history=" >> $GITHUB_OUTPUT
            echo "No existing PR found"
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create or Update Pull Request
        if: steps.check_update.outputs.needs_update == 'true'
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "Update packwiz to ${{ steps.fetch_commit.outputs.commit_date }}"
          title: "Update packwiz to ${{ steps.fetch_commit.outputs.commit_date }}"
          body: |
            ## Automated Version Update

            This PR updates the packwiz formula to the latest upstream version.

            **Latest Changes:**
            - Version: `${{ steps.fetch_commit.outputs.commit_date }}`
            - Commit: `${{ steps.fetch_commit.outputs.short_sha }}`
            - SHA256: `${{ steps.calculate_sha.outputs.sha256 }}`

            **Upstream commit:**
            https://github.com/packwiz/packwiz/commit/${{ steps.fetch_commit.outputs.commit_sha }}

            ---

            <!-- UPDATE_HISTORY_START -->
            ${{ steps.get_pr.outputs.update_history }}
            <!-- UPDATE_HISTORY_END -->
          branch: update-packwiz
          delete-branch: false
